# -*- coding: utf-8 -*-
"""Untitled9.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Yv-zBtL4XketShvbi5p19wBa70maRf-x
"""

import pandas as pd
import numpy as np

# best_seed = 0
# best_accuracy = 0
# for i in range(10000, 20000):
# Settings
np.random.seed(7250)
n_initial = 2000  # generate a larger pool to sample from

# Generate synthetic features
capital_share = np.random.uniform(5000, 50000, n_initial)
loan_amount = np.random.uniform(1000, capital_share)  # enforce loan ≤ capital_share
savings = np.random.uniform(0, capital_share)

# Compute synthetic approval probabilities
ratio_loan = loan_amount / capital_share
ratio_savings = savings / capital_share
logit = -2 + 5 * (1 - ratio_loan) + 4 * ratio_savings
prob_approval = 1 / (1 + np.exp(-logit))

# Generate binary labels
approved = np.random.binomial(1, prob_approval)

# Assemble into DataFrame
df = pd.DataFrame({
    "loan_amount": loan_amount.round(2),
    "capital_share": capital_share.round(2),
    "savings": savings.round(2),
    "approved": approved
})

# Sample exactly 250 approved and 250 disapproved
df_pos = df[df.approved == 1].sample(250, random_state=2)
df_neg = df[df.approved == 0].sample(250, random_state=2)
df_balanced_500 = pd.concat([df_pos, df_neg]).sample(frac=1, random_state=2).reset_index(drop=True)

df_balanced_500.head()

from sklearn.preprocessing import StandardScaler

X = df_balanced_500[["loan_amount", "capital_share", "savings"]]
y = df_balanced_500["approved"]

scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(
    X_scaled, y, test_size=0.2, random_state=42
)

from sklearn.linear_model import LogisticRegression

model = LogisticRegression()
model.fit(X_train, y_train)

from sklearn.metrics import roc_auc_score, accuracy_score

y_prob = model.predict_proba(X_test)[:, 1]    # the “approved” probability
y_pred = model.predict(X_test)

accuracy = accuracy_score(y_test, y_pred)

    #results in an accuracy of 93%
    # Update best accuracy and seed
#     if accuracy > best_accuracy:
#         best_accuracy = accuracy
#         best_seed = i

# print("Best Seed:", best_seed)
# print("Best Accuracy:", best_accuracy)